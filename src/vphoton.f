      SUBROUTINE VPHOTON(EE,WMIN,WGT,LOCAL,UPSILN,NVPHMAX,
     %     NVPH,EVPH,XY,IRTN)
C    THIS ROUTINE IS OBSOLETE
C  Generate a virtual photon
C  Input
C   EE     Electron energy (eV)
C   WMIN   Minimum energy of photon (eV)
C   WGT    Weight parameter of the photonsto be generated.
C          This parameter controls the number of virtual photons
C          to be generated (large WGT causes a smaller number).
C          The real weight to be asigned to the generated photons
C          is WGT times the weight of the parent electron.
C   LOCAL  If not zero, local virtual photon, i.e., transverse
C          extent is ignored (XY=(0,0)).
C   NVPHMAX   Maximum number of virtual photons
C  Output
C   NVPH   Number of generated virtual photons
C   EVPH(i) (i=1,NVPH)  Energy (eV)
C   XY(j,i) (j=1,2),(i=1,NVPH)  Transverse coordinate of virtual
C             photons (meter)
C   IRTN   Return code
C              0: normal
C              1000: NVPH exceeded NVPHMAX
C
C  Energy spectrum
C   Number of virtual photons asociated with an electron
C   of energy E is given by
C               alpha  dy              alpha
C      n(y)dy = -----*---*2*log(1/y) = ----- du
C                pi    y                 pi
C   where alpha is the fine structure constant, 
C   y=w/E  (w:photon energy) and u=[log(1/y)]^2.
C   ( WMIN/E=ymin<y<1, 0<u<umax,  umax=[log(1/ymin)]^2 )
C   The distribution of u is uniform so that it can easily be
C   generated. The total number of virtual photon is
C   (alpha)/pi*umax.
C
C  Transverse momentum distribution
C    For given y, the distribution of transverse momentum q
C    is proportional to
C      q^3 dq /(q^2+(m*y)^2)^2
C    where m is the electron rest mass.
C    By identifying the impact parameter r with 1/q,
C    the transverse position distribution of virtual photon
C    is proportional to
C             r*dr
C     ---------------------
C     (r^2+1/y^2)^2 * (r^2+1)
C    where r is in units of Compton wave length.
C
C  Generate r by using inverse function method.
C     Integrating the above distribution, one gets the equation
C     for r:
C       t+1        t+1
C      ----- - log----- = 1 + R[ log(a)-1+1/a ]
C       t+a        t+a
C     where a=1/y^2, t=r^2, R=random number in (0,1).
C     This equation is solved by EQLOG.
C     After finding r, (x,y) is generated by r(cos(phi),sin(phi))
C     with uniform distribution of phi. (Actually, this is done
C     by two random numbers without using sin and cos.
C      
      IMPLICIT NONE
      INTEGER LOCAL,NVPHMAX,NVPH,IRTN
      REAL*8 EE,WMIN,WGT,UPSILN,EVPH(NVPHMAX),XY(2,NVPHMAX)
      INTEGER IDIV,NDIV
      REAL*8 P0,Y,YLOG,CLOG,RSQ,RR,NORM,XY1(2)
      REAL*8 RANDCAIN,EQLOG
	EXTERNAL RANDCAIN
      REAL*8 PI/3.14159 26535 89793 238D0/
      REAL*8 PMAX/0.1D0/
      INCLUDE 'include/cnstcm.h'
C
C
      NVPH=0
      IF(EE.LE.WMIN) GOTO 800
      CLOG=LOG(EE/WMIN)
      P0=FINSTRC/PI*CLOG**2/WGT
      IF(P0.GE.PMAX) THEN
        NDIV=INT(P0/PMAX)+1
        P0=P0/NDIV
      ELSE
        NDIV=0
      ENDIF
      DO 300 IDIV=1,NDIV
        IF(RANDCAIN().GE.P0) GOTO 300
        NVPH=NVPH+1
        IF(NVPH.GT.NVPHMAX) GOTO 900
        YLOG=SQRT(RANDCAIN())*CLOG
        Y=EXP(-YLOG)
        EVPH(NVPH)=EE*Y
        IF(LOCAL.EQ.0) THEN
          RSQ=EQLOG(RANDCAIN()*(2*YLOG-1+Y**2))
          RSQ=(RSQ/Y**2-1)/(1-RSQ)
 200      XY1(1)=RANDCAIN()
          XY1(2)=RANDCAIN()
          RR=XY1(1)**2+XY1(2)**2
          IF(RR.LE.0.01) GOTO 200
          NORM=SQRT(RSQ/RR)*CMPTNWL
          XY(1,NVPH)=NORM*XY1(1)
          XY(2,NVPH)=NORM*XY1(2)
        ELSE
          XY(1,NVPH)=0
          XY(2,NVPH)=0
        ENDIF
 300  CONTINUE
 800  IRTN=0
      RETURN
 900  IRTN=1000
      RETURN
      END
C-----------------
      FUNCTION EQLOG(C)
C  Solve the transcendental equation
C       X-LOG(X)=C+1  (C>=0)
C  in the region 0<X<=1
      IMPLICIT NONE
      REAL*8 EQLOG,C
      INTEGER ITR
      REAL*8 C1,X,DX,F,DF,DDF
C
      C1=1+C
      X=EXP(-C1+EXP(-C))
      DO 200 ITR=1,3
        F=X-LOG(X)-C1
        DF=1-1/X
        DDF=1/X**2
        DX=2*F/((-DF)+SQRT(DF**2-2*F*DDF))
        X=X+DX
 200  CONTINUE
      EQLOG=X
      RETURN
      END
