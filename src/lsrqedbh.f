	SUBROUTINE LSRQEDBH(T1,IRTN)
C    e- + Laser gamma --> e- e+ e-   via virtual gamma + Laser gamma --> e+e-
C    IS        Longitudinal slice number (slices used only because virtual photon code uses slices)
C    T1        time of interaction 
C    IRTN      Return code. Should be zero normally; non-zero value can be returned by vphbfl, lnbwgn, or lbwevent
C  Virtual photons
C   Virtual photons from electrons and positrons are generated by
C   calling the subroutine VPHBFL. The following variables in the
C   common block BEAMCM are defined.
C    NVPH     Number of virtual photons generated, including both
C             right- and left-going beam.
C    EPVPH(i,n) (i=0,1,2,3, n=1,NVPH) Energy-momentum of n-th virtual
C             photon.
C    WGTVPH(n) (n=1,NVPH)  Weight factor.
C    IDVPH(n) (n=1,NVPH)  Parent particle ID of the virtual photon.
	USE BEAMCM
	USE LASRDATA
      IMPLICIT NONE
      INTEGER IS,IRTN
      REAL*8 T1
      INCLUDE 'include/lasrcm.h'
C      INCLUDE 'include/beamcm.h'
      INCLUDE 'include/ctrlcm.h'
      INCLUDE 'include/cnstcm.h'
      INTEGER N,LSR,LR,ISPNBW,NDIV,IRTN1,LV,IV,K,N2
      REAL*8 TXYS1(0:3),PD,PD0,EV(3,3),PE2(0:3),PP2(0:3),
     %   HE2,HP2,PROB,WGT1,T2,DT,SPE2(3),SPP2(3),GVEC(3,3),
     %   OMG,ABSPE,ABSPP,PMAXBW1,PMAX1,PDMAX,EPNEW(0:3)
      REAL*8 testm0,testm1,pmag0,pmag1
      REAL*8 RANDCAIN
	EXTERNAL RANDCAIN
	INTEGER I,NPH1
	INTEGER EMSG
      REAL*8 SPINVPH(3)/0,0,0/
	INTEGER NDBG/0/
	SAVE NDBG

C   When artificially enhanced event rate is used, the generator creates an event
C   with event weight WGT1 (0<WGT1<=1).
C   Enhance policy
C      1:  Leave initial particle with the reduced weight w0*(1-WGT1)
C          (w0= initial weight of the initial particle)
C          and create new particle(s) with weight w0*WGT1
C      2:  Eliminate the initial particle with the probability WGT1 
C          (otherwise leave it as it was)
C          and create new particle(s) with weight w0*WGT1
C      3:  Leave initial particle with the reduced weight w0*(1-WGT1)
C          and create new particle(s) with the probability WGT1
C   This parameter was introduced 2000 Aug.25.
C
      IRTN=0
c      print *, " lsrqedbh nlsr,nphbh= ", nlsr,nphbh
      IF(NLSR.LE.0.OR.NPHBH.LT.0) RETURN
      CALL CPUTIM('LSRQEDBH',1)
      ISPNBW=0
      PMAXBW1=MIN(1D0,PMAXBW)
      CALL VPHBFL(-1,IRTN1,MSGFL)
c      print *, " lsrqedbh after vphbfl irtn1,nvph= ", irtn1,nvph
      IF(IRTN1.NE.0) GOTO 940
      IF(NVPH.EQ.0) GOTO 1000
      DO LSR=1,NLSR
C  LRLSR(LSR)       1: laser right-going, 2: laser left-going,	
C       vphbfl LR=1: right-going virtual photon, positive z (s) direction
C       vphbfl LR=2: left-going virtual photon, negative z (s) direction
	 OMG=OMGLSR(LSR)
	 DO IV=1,NVPH
	    LR=1
	    IF(EPVPH(3,IV).LT.0) LR=2
	    IF(LRLSR(LSR).EQ.LR) CYCLE
	    N2=IDVPH(IV)
	    IF(LOST(N2).NE.0) CYCLE
	    IF(T1.LE.TXYVPH(0,IV)) CYCLE
	    T2=TXYVPH(0,IV)
	    NDIV=1
	    PMAX1=0
	    PDMAX=0
 100	    CONTINUE
	    DT=(T1-T2)/NDIV
	    DO I=0,3
	       TXYS1(I)=TXYVPH(I,IV)+(T2-TXYVPH(0,IV)+0.5*DT)
     %	            *(EPVPH(I,IV)/EPVPH(0,IV))
	    ENDDO
	    CALL LSRGEO(LSR,TXYS1,PD,PD0,EV,OMG,ISPNBW)
	    PROB=0
	    IF(PD.EQ.0) GOTO 200
	    IF(NPHBH.EQ.0) THEN
	       DO I=1,3
		  GVEC(I,3)=EPVPH(I,IV)/EPVPH(0,IV)
		  GVEC(I,1)=0
		  GVEC(I,2)=0
	       ENDDO
	       GVEC(1,1)=1
	       GVEC(2,2)=1
	       IF(EPVPH(3,IV).LT.0) GVEC(2,2)=-1
c	    if(ep(0,n).gt.62.6e9.or.abs(spin(2,n)).gt.1.05) then
c	    print *, " omg= ", omg, " ev(:,3)= ", ev(:,3),
c     %         " stksls(:,lsr)= ", stksls(:,lsr)
c            print *, " ev(:,1)= ", ev(:,1), " ev(:,2)= ", ev(:,2)
c	    print *, " ep(0,n)= ", ep(0,n), " gvec(:,3)= ", gvec(:,3),
c     %         " spin(:,n)= ", spin(:,n)
c            print *, " gvec(:,1)= ", gvec(:,1), " gvec(:,2)= ", gvec(:,2)
c	    emsg=10000
c	    else
c	    emsg=0
c	    endif
	       CALL LNBWGN(OMG,EV(1,3),STKSLS(1,LSR),
     %                  EV(1,1),EV(1,2),EPVPH(0,IV),GVEC(1,3),SPINVPH,
     %                  GVEC(1,1),GVEC(1,2),PD,DT,ISPIN,
     %                  NPH1,PE2(1),PP2(1),SPE2,SPP2,0)
c     %        NPH1,PE2(1),PP2(1),SPE2,SPP2,emsg)
c23456789012345678901234567890123456789012345678901234567890123456789012
c       10        20        30        40        50        60        70      
	       IF(NPH1.GE.1) THEN
		  PE2(0)=SQRT(MASS(2)**2+PE2(1)**2+PE2(2)**2+PE2(3)**2)
		  PP2(0)=SQRT(MASS(2)**2+PP2(1)**2+PP2(2)**2+PP2(3)**2)
		  WGT1=1
		  epnew=ep(:,n2)-pe2-pp2
		  pmag0=sqrt(epnew(1)**2+epnew(2)**2+epnew(3)**2)
		  pmag1=epnew(0)**2-mass(2)**2
		  if(pmag1.lt.0.) then
		     pmag1=0.
		     print *,
     %                  " lsrqedph warning epnew(0)**2-mass(2)**2 < 0"
		  else
		     pmag1=sqrt(pmag1)
		  endif
		  epnew(1:3)=epnew(1:3)*pmag1/pmag0
		  testm0=sqrt(ep(0,n2)**2
     %                 -ep(1,n2)**2-ep(2,n2)**2-ep(1,n2)**2)
		  testm1=sqrt(epnew(0)**2
     %                 -epnew(1)**2-epnew(2)**2-epnew(3)**2)
c		  write(msgfl,843) " lsrqedbh ",
c     %             " ep   = ", ep(:,n2)," testm0= ",testm0		  
c		  write(msgfl,843) " lsrqedbh ",
c     %              " epnew= ", epnew," testm1= ",testm1
c 843		  format(1x,2a,4d14.6,a,d14.6)
		  ep(:,n2)=epnew
	       ENDIF
	       ELSE
		  GOTO 930
	       ENDIF
	       IF(IRTN.NE.0) THEN
		  NDIV=INT(NDIV*PROB/PMAXBW1+1D0)
		  GOTO 100
	       ENDIF
	       IF(NPH1.GT.0) THEN
		  CALL LBWEVENT(N2,DT,WGT1,PE2,SPE2,PP2,SPP2,LENHBW,IRTN)
		  IF(IRTN.NE.0) GOTO 920
c   adjust energy of electron that radiates virtual photon
	       ENDIF
 200	       T2=T2+DT
	       NDIV=NDIV-1
	       PMAX1=PMAX1+PROB
	       PDMAX=MAX(PDMAX,PD)
	       IF(NDIV.GE.1) GOTO 100	
	       PMMBW=MAX(PMMBW,PMAX1)
	       IF(PMAX1.GT.PSTOPBW) GOTO 900
	    ENDDO
	 ENDDO
      IRTN=0
      GOTO 1000
C
 900  IRTN=1000
      WRITE(MSGFL,905) PMAX1,PDMAX,EPVPH(0,IV)
 905  FORMAT(' (SUBR.LSRQEDBH) Pstop for Breit-Wheeler exceeded limit.',
     %   /,'   Prob=',1PD10.3,'  for Power density=',1PD10.3,' W/m^2',
     %   'E(photon)=',1PD9.3,'eV')
      GOTO 1000
 920  IRTN=1002
      WRITE(MSGFL,925)
 925  FORMAT(' (SUBR.LSRQEDBH) Too many new particles in one time step')
      GOTO 1000
 930  CONTINUE
      WRITE(MSGFL,935)
 935  FORMAT(' (SUBR.LSRQEDBH) Non-linear Bethe-Heitler not supported ')
      CALL STOPCAIN(100)
 940  CONTINUE
      WRITE(MSGFL,945) irtn1
 945  FORMAT(' (SUBR.LSRQEDBH) error return from vphbfl irtn1= ',i12)
      CALL STOPCAIN(100)
1000  CALL CPUTIM('LSRQEDBH',2)
      RETURN
      END
